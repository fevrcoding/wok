// ==========================================================================
// Mixins and functions
//
// Note: always put function at the beginning of the sub-section
// ==========================================================================

// Generic
// ==========================================================================

@function perc($width, $container-width: $container-width) {
    @return percentage($width / $container-width);
}

@function perc-image-width($image-src, $container-width: $container-width) {
    @return percentage(image-width($image-src) / $container-width);
}

@function strip-units($value) {
    @return $value / ($value * 0 + 1);
}

@function z-index($level: 'base') {
    @return map-get($layers, $level);
}



// Elements
// ==========================================================================

@mixin boost-performance ($translate: true){
    backface-visibility: hidden;
    transform-style: preserve-3d;
    @if ($translate) {
        transform: translate3d(0, 0, 0);
        will-change: transform;
    }
}

@mixin clearfix {
    *zoom: 1;

    &:before,
    &:after {
        display: table;
        content: '';
    }

    &:after {
        clear: both;
    }
}

@mixin ir($image-url, $context: false) {
    background: image-url($image-url) no-repeat 0 0;
    background-size: 100% auto;
    height: image-height($image-url);
    width: image-width($image-url);
}

@mixin pseudo-img($image-url, $width: false, $height: false) {
    display: block;
    content: ' ';
    background: image-url($image-url) no-repeat 0 0;
    @if $height {
        height: $height;
    } @else {
        height: image-height($image-url);
    }
    @if $width {
        width: $width;
    } @else {
        width: image-width($image-url);
    }
}

@mixin fit-background-image($image-url, $inline: false, $ratio: 1, $line-height: false) {
    @if $line-height {
        line-height: ceil(image-height($image-url) * $ratio);
    } @else {
        width: ceil(image-width($image-url) * $ratio);
        height: ceil(image-height($image-url) * $ratio);
    }
    @if $inline {
        background-image: inline-image($image-url);
        background-repeat: no-repeat;
        background-position: 0 0;
    } @else {
        background: image-url($image-url) no-repeat 0 0;
    }
    @if $ratio != 1 {
        background-size: ceil(image-width($image-url) * $ratio) auto;
    }
}

@mixin img-responsive($display: block) {
    display: $display;
    max-width: 100%;
    height: auto;
}

//see https://github.com/tinganho/compass-placeholder
@mixin placeholder {
    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
    }

    &::-moz-placeholder {
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }
}

@mixin classed-headings($headings...) {
    @if length($headings) == 0 {
        $headings: map-keys($font-sizes-headings);
    }
    $selectors: ();
    @each $i in $headings {
        $current-heading: nth($headings, $i);
        $selector: unquote("h#{$current-heading}, .h#{$current-heading}");
        $selectors: append($selectors, $selector, comma);
    }

    #{$selectors} {
        @content;
    }
}

@mixin triangle($color: #000, $size: '5px', $direction: 'up') {
    width: 0;
    height: 0;
    @if $direction == 'up' {
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        border-left: $size solid transparent;
    }
    @if $direction == 'down' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
        border-left: $size solid transparent;
    }
    @if $direction == 'right' {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
    }
    @if $direction == 'left' {
        border-top: $size solid transparent;
        border-right: $size solid $color;
        border-bottom: $size solid transparent;
    }
}

//DEPRECATED
@mixin transparent-bg($color, $alpha) {
    $rgba: rgba($color, $alpha);
    background-color: $rgba;
    @warn "This mixin is deprecated";
}

// Typography
//
// Adapted from https://github.com/csswizardry/typecsset
// ==========================================================================

@function em($pixels, $context: $font-size-default) {
    @return #{$pixels/$context}em;
}

@function rem($size) {
    @return #{$size / $font-size-default}rem;
}


@function font-size($size, $rem: true) {
    $result: $size;
    @if map-has-key($font-sizes, $size) {
        $result: map-get($font-sizes, $size);
    }

    @if $rem == true {
        @return rem($result);
    } @else {
        @return $result
    }
}

@function font-weight($weight) {
    @if map-has-key($font-weights, $weight) {
        @return map-get($font-weights, $weight);
    } @else {
        @warn "Weight #{$weight} undefined";
    }
}

@function line-height($size, $context: m) {
    $context-size: font-size($context, false);
    @return em($size, $context-size);
}


@mixin text-ellipsis() {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

@mixin visually-hidden {
    position: absolute;
    overflow: hidden;
    clip: rect(0 0 0 0);
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
    border: 0;
}

@mixin reset-typography($font-weight: normal, $line-height: inherit) {
    font-weight: $font-weight;
    font-size: $font-size-default;
    line-height: $line-height;
    margin-bottom: 0;
    margin-top: 0;
}

//DEPRECATED
@mixin rem-font-size($font-size, $line-height: $font-lheight-default) {
    font-size: rem($font-size);
    @if $line-height != false {
        $lh-unit: unit($line-height);
        @if $lh-unit == "" {
            line-height: $line-height;
        } @else {
            line-height: ceil($font-size / $line-height) * $line-height / $font-size;
        }
    }
    @warn "This mixin is deprecated";
}


