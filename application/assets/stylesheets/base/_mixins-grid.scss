// ==========================================================================
// Responsive Grid System
//
// Shamelessly taken from https://github.com/twbs/bootstrap-sass/blob/master/vendor/assets/stylesheets/bootstrap/_mixins.scss
// ==========================================================================

$grid-enabled: true !default;
$grid-fluid-breakpoints: false !default;

//** Number of columns in the grid.
$grid-columns: 12 !default;

//** Padding between columns. Gets divided in half for the left and right.
$grid-gutter-width: 30px !default;

// Container sizes
//
// Define the maximum width of `.container` for different screen sizes.
// ==========================================================================

// Small screen / tablet
$container-tablet: 720px + $grid-gutter-width !default;

//** For `$screen-sm-min` and up.
$container-sm: $container-tablet !default;

// Medium screen / desktop
$container-desktop: 940px + $grid-gutter-width !default;

//** For `$screen-md-min` and up.
$container-md: $container-desktop !default;

// Large screen / wide desktop
$container-large-desktop: 1140px + $grid-gutter-width !default;

//** For `$screen-lg-min` and up.
$container-lg: $container-large-desktop !default;

//MIXINS
// ==========================================================================

@mixin make-row {
    @include clearfix;
    margin-right: $grid-gutter-width / -2;
    margin-left: $grid-gutter-width / -2;
}

@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
    position: relative;
    float: left;
    width: percentage($columns / $grid-columns);
    min-height: 1px;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
}

@mixin make-xs-column-offset($columns) {
    @include mq(xs) {
        margin-left: percentage($columns / $grid-columns);
    }
}

@mixin make-xs-column-push($columns) {
    @include mq(xs) {
        left: percentage($columns / $grid-columns);
    }
}

@mixin make-xs-column-pull($columns) {
    @include mq(xs) {
        right: percentage($columns / $grid-columns);
    }
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
    position: relative;
    min-height: 1px;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;

    @include mq(sm) {
        float: left;
        width: percentage($columns / $grid-columns);
    }
}

@mixin make-sm-column-offset($columns) {
    @include mq(sm) {
        margin-left: percentage($columns / $grid-columns);
    }
}

@mixin make-sm-column-push($columns) {
    @include mq(sm) {
        left: percentage($columns / $grid-columns);
    }
}

@mixin make-sm-column-pull($columns) {
    @include mq(sm) {
        right: percentage($columns / $grid-columns);
    }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
    position: relative;
    min-height: 1px;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;

    @include mq(md) {
        float: left;
        width: percentage($columns / $grid-columns);
    }
}

@mixin make-md-column-offset($columns) {
    @include mq(md) {
        margin-left: percentage($columns / $grid-columns);
    }
}

@mixin make-md-column-push($columns) {
    @include mq(md) {
        left: percentage($columns / $grid-columns);
    }
}

@mixin make-md-column-pull($columns) {
    @include mq(md) {
        right: percentage($columns / $grid-columns);
    }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
    position: relative;
    min-height: 1px;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;

    @include mq(lg) {
        float: left;
        width: percentage($columns / $grid-columns);
    }
}

@mixin make-lg-column-offset($columns) {
    @include mq(lg) {
        margin-left: percentage($columns / $grid-columns);
    }
}

@mixin make-lg-column-push($columns) {
    @include mq(lg) {
        left: percentage($columns / $grid-columns);
    }
}

@mixin make-lg-column-pull($columns) {
    @include mq(lg) {
        right: percentage($columns / $grid-columns);
    }
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] Grid converted to use SASS cycles (LESS uses recursive nested mixin defs not supported by SASS)
@mixin make-grid-columns {
    $list: '';
    $i: 1;
    $list: ".l-col--xs-#{$i}, .l-col--sm-#{$i}, .l-col--md-#{$i}, .l-col--lg-#{$i}";
    @for $i from 2 through $grid-columns {
        $list: ".l-col--xs-#{$i}, .l-col--sm-#{$i}, .l-col--md-#{$i}, .l-col--lg-#{$i}, #{$list}";
    }

    #{$list} {
        position: relative;
        // Prevent columns from collapsing when empty
        min-height: 1px;
        // Inner gutter via padding
        padding-right: $grid-gutter-width / 2;
        padding-left: $grid-gutter-width / 2;
    }
}

// [converter] Grid converted to use SASS cycles (LESS uses recursive nested mixin defs not supported by SASS)
@mixin make-grid-columns-float($class) {
    $list: '';
    $i: 1;
    $list: ".l-col--#{$class}-#{$i}";
    @for $i from 2 through $grid-columns {
        $list: ".l-col--#{$class}-#{$i}, #{$list}";
    }

    #{$list} {
        float: left;
    }
}

@mixin calc-grid($index, $class, $type) {
    @if $type == width and $index > 0 {

        .l-col--#{$class}-#{$index} {
            width: percentage($index / $grid-columns);
        }
    }
    @if $type == push {

        .l-col--#{$class}-push-#{$index} {
            left: percentage($index / $grid-columns);
        }
    }
    @if $type == pull {

        .l-col--#{$class}-pull-#{$index} {
            right: percentage($index / $grid-columns);
        }
    }
    @if $type == offset {

        .l-col--#{$class}-offset-#{$index} {
            margin-left: percentage($index / $grid-columns);
        }
    }
}

// [converter] This is defined recursively in LESS, but SASS supports real loops
@mixin make-grid($columns, $class, $type) {
    @for $i from 0 through $columns {
        @include calc-grid($i, $class, $type);
    }
}
